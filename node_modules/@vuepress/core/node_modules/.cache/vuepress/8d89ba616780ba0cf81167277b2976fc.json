{"remainingRequest":"D:\\docLog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\docLog\\node_modules\\vuepress-theme-reco\\helpers\\utils.js","dependencies":[{"path":"D:\\docLog\\node_modules\\vuepress-theme-reco\\helpers\\utils.js","mtime":1755369503979},{"path":"D:\\docLog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1755335404359},{"path":"D:\\docLog\\node_modules\\babel-loader\\lib\\index.js","mtime":1755335404418}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}